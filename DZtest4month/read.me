1.Промис — это объект, который может находится в состояниях: 
pending — изначальное состояние — ожидание, операция не выполнена и не отклонена.
fulfilled — операция успешно выполнена, в таком случае возвращается результат.
rejected — операция не выполнилась, возвращается причина — ошибка.
2.Конструкция Async/await

// async/await
async getBooksByAuthorWithAwait(authorId) {
  const books = await bookModel.fetchAll();
  return books.filter(b => b.authorId === authorId);
}
// промис
getBooksByAuthorWithPromise(authorId) {
  return bookModel.fetchAll()
    .then(books => books.filter(b => b.authorId === authorId));
}

3.Контекст.Код всегда выполняется внутри некоего контекста — 
это, если говорить упрощённо, концепция, описывающая окружение, в котором- 
производится выполнение кода

4.В JavaScript существует три типа контекстов выполнения:

/Глобальный контекст выполнения.
Глобальный контекст характеризуется наличием глобального объекта, которым, в случае с браузером, является объект window, 
и тем, что ключевое слово this указывает на этот глобальный объект.В программе может быть лишь один 
глобальный контекст.

/Контекст выполнения функции.
Каждая функция имеет собственный контекст выполнения.
В программе может одновременно присутствовать множество контекстов выполнения функций.
При создании нового контекста выполнения функции он проходит через определённую последовательность шагов.

let a = 'Hello World!';
function first() {
  console.log('Inside first function');
  second();
  console.log('Again inside first function');
}
function second() {
  console.log('Inside second function');
}
first();
console.log('Inside Global Execution Context');


/Контекст выполнения функции eval.Но ею мы пользовались редко.



